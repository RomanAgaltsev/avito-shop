// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RomanAgaltsev/avito-shop/internal/app/avitoshop/service/shop (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/repository.go -package=mock github.com/RomanAgaltsev/avito-shop/internal/app/avitoshop/service/shop Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v4 "github.com/cenkalti/backoff/v4"
	gomock "go.uber.org/mock/gomock"

	model "github.com/RomanAgaltsev/avito-shop/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockRepository) BuyItem(ctx context.Context, bo *v4.ExponentialBackOff, user model.User, item model.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, bo, user, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockRepositoryMockRecorder) BuyItem(ctx, bo, user, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockRepository)(nil).BuyItem), ctx, bo, user, item)
}

// CreateBalance mocks base method.
func (m *MockRepository) CreateBalance(ctx context.Context, bo *v4.ExponentialBackOff, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", ctx, bo, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockRepositoryMockRecorder) CreateBalance(ctx, bo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockRepository)(nil).CreateBalance), ctx, bo, user)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, bo *v4.ExponentialBackOff, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, bo, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, bo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, bo, user)
}

// GetBalance mocks base method.
func (m *MockRepository) GetBalance(ctx context.Context, bo *v4.ExponentialBackOff, user model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, bo, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRepositoryMockRecorder) GetBalance(ctx, bo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRepository)(nil).GetBalance), ctx, bo, user)
}

// GetHistory mocks base method.
func (m *MockRepository) GetHistory(ctx context.Context, bo *v4.ExponentialBackOff, user model.User) (model.CoinsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", ctx, bo, user)
	ret0, _ := ret[0].(model.CoinsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockRepositoryMockRecorder) GetHistory(ctx, bo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockRepository)(nil).GetHistory), ctx, bo, user)
}

// GetInventory mocks base method.
func (m *MockRepository) GetInventory(ctx context.Context, bo *v4.ExponentialBackOff, user model.User) ([]model.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, bo, user)
	ret0, _ := ret[0].([]model.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockRepositoryMockRecorder) GetInventory(ctx, bo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockRepository)(nil).GetInventory), ctx, bo, user)
}

// SendCoins mocks base method.
func (m *MockRepository) SendCoins(ctx context.Context, bo *v4.ExponentialBackOff, fromUser, toUser model.User, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, bo, fromUser, toUser, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockRepositoryMockRecorder) SendCoins(ctx, bo, fromUser, toUser, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockRepository)(nil).SendCoins), ctx, bo, fromUser, toUser, amount)
}
